#
# Copyright 2019-2021 Signal Messenger, LLC
# SPDX-License-Identifier: AGPL-3.0-only
#

if (is_android) {
  import("//build/config/android/config.gni")
  import("//build/config/android/rules.gni")
  import("//webrtc.gni")

  group("rust") {
    deps = [
      ":libringrtc"
    ]
  }

  libname = "libringrtc.so"

  if (target_cpu == "arm") {
    cargo_target = "arm-linux-androideabi"
  } else if (target_cpu == "arm64") {
    cargo_target = "aarch64-linux-android"
  } else if (target_cpu == "x86") {
    cargo_target = "i686-linux-android"
  } else if (target_cpu == "x64") {
    cargo_target = "x86_64-linux-android"
  }
  assert(defined(cargo_target), "Unsupported target_cpu for cargo: $target_cpu")

  if (is_debug) {
    cargo_output_dir = "${target_gen_dir}/${cargo_target}/debug"
  } else {
    cargo_output_dir = "${target_gen_dir}/${cargo_target}/release"
  }

  unstripped_lib = "$root_out_dir/lib.unstripped/${libname}"
  stripped_lib = "$root_out_dir/${libname}"

  rust_sources = [
    "Cargo.toml",
    "Cargo.lock",
    "cbindgen.toml",
    "scripts/cargo.py",
    "scripts/clippy.py",
    "scripts/strip.py",
    "src/android/api/jni_call_manager.rs",
    "src/android/android_platform.rs",
    "src/android/call_manager.rs",
    "src/android/error.rs",
    "src/android/jni_util.rs",
    "src/android/logging.rs",
    "src/android/webrtc_java_media_stream.rs",
    "src/android/webrtc_peer_connection_factory.rs",
    "src/common/actor.rs",
    "src/common/mod.rs",
    "src/common/units.rs",
    "src/core/call_fsm.rs",
    "src/core/call_manager.rs",
    "src/core/call_mutex.rs",
    "src/core/call.rs",
    "src/core/connection.rs",
    "src/core/connection_fsm.rs",
    "src/core/crypto.rs",
    "src/core/group_call.rs",
    "src/core/http_client.rs",
    "src/core/platform.rs",
    "src/core/sfu_client.rs",
    "src/core/signaling.rs",
    "src/core/util.rs",
    "src/error/mod.rs",
    "src/protobuf/data_channel.rs",
    "src/protobuf/group_call.rs",
    "src/protobuf/signaling.rs",
    "src/webrtc/data_channel.rs",
    "src/webrtc/ice_gatherer.rs",
    "src/webrtc/media.rs",
    "src/webrtc/network.rs",
    "src/webrtc/peer_connection_factory.rs",
    "src/webrtc/peer_connection_observer.rs",
    "src/webrtc/peer_connection.rs",
    "src/webrtc/rtp.rs",
    "src/webrtc/sdp_observer.rs",
    "src/webrtc/stats_observer.rs",
    "src/webrtc/ffi/data_channel.rs",
    "src/webrtc/ffi/ice_gatherer.rs",
    "src/webrtc/ffi/logging.rs",
    "src/webrtc/ffi/media.rs",
    "src/webrtc/ffi/peer_connection_factory.rs",
    "src/webrtc/ffi/peer_connection_observer.rs",
    "src/webrtc/ffi/peer_connection.rs",
    "src/webrtc/ffi/ref_count.rs",
    "src/webrtc/ffi/sdp_observer.rs",
    "src/webrtc/ffi/stats_observer.rs",
    "src/lib.rs",
  ]

  # Lint the Rust code using "cargo clippy"
  action("libringrtc_lint") {
    sources = rust_sources

    stamp_file = "${cargo_output_dir}/clippy"

    args = [
      "${stamp_file}",
      "--target=${cargo_target}",
      "--target-dir=" + rebase_path(target_gen_dir),
      "--manifest-path=" + rebase_path("Cargo.toml"),
    ]

    if (!is_debug) {
      args += [ "--release" ]
    }

    outputs = [ "${stamp_file}" ]
    script = "scripts/clippy.py"

    deps = [
      "../rffi:libringrtc_rffi",
    ]
  }

  action("libringrtc_cargo") {
    sources = rust_sources

    args = [ "rustc",
             "--target=${cargo_target}",
             "--target-dir=" + rebase_path(target_gen_dir),
             "--manifest-path=" + rebase_path("Cargo.toml"),
           ]
    # add  "--verbose" here (and below) to increase rustc verbosity

    if (!is_debug) {
      args += [ "--release" ]
    }

    args += [ "--",
              "-C", "link-arg=-fuse-ld=gold",
              "-C", "link-arg=-Wl,--dynamic-linker,/system/bin/linker",
              "-L", "native=" + rebase_path(root_build_dir),
              "-l", "dylib=ringrtc_rffi",
            ]
    # add  "--verbose" here (and above) to increase rustc verbosity

    outputs = [ "${cargo_output_dir}/${libname}" ]
    script = "scripts/cargo.py"

    deps = [
      ":libringrtc_lint",
    ]

  }

  copy("libringrtc_unstripped") {
    sources = [ "${cargo_output_dir}/${libname}" ]
    outputs = [ "$unstripped_lib" ]

    deps = [ ":libringrtc_cargo" ]

  }

  action("libringrtc") {
    sources = [ "$unstripped_lib" ]
    outputs = [ "$stripped_lib" ]

    strip = rebase_path("//buildtools/third_party/eu-strip/bin/eu-strip", root_build_dir)
    args = [ "--command=${strip}",
             "--input=" + rebase_path(unstripped_lib),
             "--output=" + rebase_path(stripped_lib),
           ]

    script = "scripts/strip.py"

    deps = [ ":libringrtc_unstripped" ]

  }
}
